"""sdlconstants.py

These are #define macros from the C headers.
"""


import sys

from .sdllibs import mixer_lib


# SDL.h


SDL_INIT_TIMER = 0x00000001
SDL_INIT_AUDIO = 0x00000010
SDL_INIT_VIDEO = 0x00000020                 # SDL_INIT_VIDEO implies SDL_INIT_EVENTS
SDL_INIT_JOYSTICK = 0x00000200              # SDL_INIT_JOYSTICK implies SDL_INIT_EVENTS
SDL_INIT_HAPTIC = 0x00001000
SDL_INIT_GAMECONTROLLER = 0x00002000        # SDL_INIT_GAMECONTROLLER implies SDL_INIT_JOYSTICK
SDL_INIT_EVENTS = 0x00004000
SDL_INIT_NOPARACHUTE = 0x00100000           # Don't catch fatal signals
SDL_INIT_EVERYTHING = (SDL_INIT_TIMER | SDL_INIT_AUDIO | SDL_INIT_VIDEO | SDL_INIT_EVENTS | SDL_INIT_JOYSTICK |
                       SDL_INIT_HAPTIC | SDL_INIT_GAMECONTROLLER)


# SDL_video.h


SDL_WINDOW_FULLSCREEN = 0x00000001          # fullscreen window
SDL_WINDOW_OPENGL = 0x00000002              # window usable with OpenGL context
SDL_WINDOW_SHOWN = 0x00000004               # window is visible
SDL_WINDOW_HIDDEN = 0x00000008              # window is not visible
SDL_WINDOW_BORDERLESS = 0x00000010          # no window decoration
SDL_WINDOW_RESIZABLE = 0x00000020           # window can be resized
SDL_WINDOW_MINIMIZED = 0x00000040           # window is minimized
SDL_WINDOW_MAXIMIZED = 0x00000080           # window is maximized
SDL_WINDOW_INPUT_GRABBED = 0x00000100       # window has grabbed input focus
SDL_WINDOW_INPUT_FOCUS = 0x00000200         # window has input focus
SDL_WINDOW_MOUSE_FOCUS = 0x00000400         # window has mouse focus
SDL_WINDOW_FULLSCREEN_DESKTOP = 0x00001001  # hacked by Gumm ( SDL_WINDOW_FULLSCREEN | 0x00001000 )
SDL_WINDOW_FOREIGN = 0x00000800             # window not created by SDL
SDL_WINDOW_ALLOW_HIGHDPI = 0x00002000       # window should be created in high-DPI mode if supported


SDL_RENDERER_SOFTWARE = 0x00000001          # The renderer is a software fallback
SDL_RENDERER_ACCELERATED = 0x00000002       # The renderer uses hardware acceleration
SDL_RENDERER_PRESENTVSYNC = 0x00000004      # Present is synchronized with the refresh rate
SDL_RENDERER_TARGETTEXTURE = 0x00000008     # The renderer supports rendering to texture


SDL_WINDOWPOS_UNDEFINED_MASK = 0x1FFF0000


def SDL_WINDOWPOS_UNDEFINED_DISPLAY(X):
    return SDL_WINDOWPOS_UNDEFINED_MASK | X


SDL_WINDOWPOS_UNDEFINED = SDL_WINDOWPOS_UNDEFINED_DISPLAY(0)


# SDL_surface.h

SDL_SWSURFACE = 0           # Just here for compatibility
SDL_PREALLOC = 0x00000001   # Surface uses preallocated memory
SDL_RLEACCEL = 0x00000002   # Surface is RLE encoded
SDL_DONTFREE = 0x00000004   # Surface is referenced internally


def SDL_MUSTLOCK(surface):
    return (surface.flags & SDL_RLEACCEL) != 0


# SDL_hints.h

SDL_HINT_FRAMEBUFFER_ACCELERATION = "SDL_FRAMEBUFFER_ACCELERATION"
SDL_HINT_RENDER_DRIVER = "SDL_RENDER_DRIVER"
SDL_HINT_RENDER_OPENGL_SHADERS = "SDL_RENDER_OPENGL_SHADERS"
SDL_HINT_RENDER_DIRECT3D_THREADSAFE = "SDL_RENDER_DIRECT3D_THREADSAFE"
SDL_HINT_RENDER_DIRECT3D11_DEBUG = "SDL_HINT_RENDER_DIRECT3D11_DEBUG"
SDL_HINT_RENDER_SCALE_QUALITY = "SDL_RENDER_SCALE_QUALITY"
SDL_HINT_RENDER_VSYNC = "SDL_RENDER_VSYNC"
SDL_HINT_VIDEO_ALLOW_SCREENSAVER = "SDL_VIDEO_ALLOW_SCREENSAVER"
SDL_HINT_VIDEO_X11_XVIDMODE = "SDL_VIDEO_X11_XVIDMODE"
SDL_HINT_VIDEO_X11_XINERAMA = "SDL_VIDEO_X11_XINERAMA"
SDL_HINT_VIDEO_X11_XRANDR = "SDL_VIDEO_X11_XRANDR"
SDL_HINT_GRAB_KEYBOARD = "SDL_GRAB_KEYBOARD"
SDL_HINT_MOUSE_RELATIVE_MODE_WARP = "SDL_MOUSE_RELATIVE_MODE_WARP"
SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS = "SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS"
SDL_HINT_IDLE_TIMER_DISABLED = "SDL_IOS_IDLE_TIMER_DISABLED"
SDL_HINT_ORIENTATIONS = "SDL_IOS_ORIENTATIONS"
SDL_HINT_ACCELEROMETER_AS_JOYSTICK = "SDL_ACCELEROMETER_AS_JOYSTICK"
SDL_HINT_XINPUT_ENABLED = "SDL_XINPUT_ENABLED"
SDL_HINT_GAMECONTROLLERCONFIG = "SDL_GAMECONTROLLERCONFIG"
SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS = "SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS"
SDL_HINT_ALLOW_TOPMOST = "SDL_ALLOW_TOPMOST"
SDL_HINT_TIMER_RESOLUTION = "SDL_TIMER_RESOLUTION"
SDL_HINT_VIDEO_HIGHDPI_DISABLED = "SDL_VIDEO_HIGHDPI_DISABLED"
SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK = "SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK"
SDL_HINT_VIDEO_WIN_D3DCOMPILER = "SDL_VIDEO_WIN_D3DCOMPILER"
SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT = "SDL_VIDEO_WINDOW_SHARE_PIXEL_FORMAT"
SDL_HINT_WINRT_PRIVACY_POLICY_URL = "SDL_HINT_WINRT_PRIVACY_POLICY_URL"
SDL_HINT_WINRT_PRIVACY_POLICY_LABEL = "SDL_HINT_WINRT_PRIVACY_POLICY_LABEL"
SDL_HINT_WINRT_HANDLE_BACK_BUTTON = "SDL_HINT_WINRT_HANDLE_BACK_BUTTON"
SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES = "SDL_VIDEO_MAC_FULLSCREEN_SPACES"


# SDL_endian.h


SDL_LIL_ENDIAN = 1234
SDL_BIG_ENDIAN = 4321

if sys.platform == 'linux':
    #include <endian.h>
    #define SDL_BYTEORDER  __BYTE_ORDER
    SDL_BYTEORDER = SDL_LIL_ENDIAN
    pass
elif sys.platform in ('hppa', 'm68k', 'mc68000', 'M_M68K', 'MIPS', 'MISPEB', 'ppc', 'POWERPC', 'M_PPC', 'sparc'):
    SDL_BYTEORDER = SDL_BIG_ENDIAN
else:
    SDL_BYTEORDER = SDL_LIL_ENDIAN


# SDL_event.h

SDL_QUERY = -1
SDL_IGNORE = 0
SDL_DISABLE = 0
SDL_ENABLE = 1


# SDL_audio.h

SDL_AUDIO_MASK_BITSIZE = 0xFF
SDL_AUDIO_MASK_DATATYPE = 1 << 8
SDL_AUDIO_MASK_ENDIAN = 1 << 12
SDL_AUDIO_MASK_SIGNED = 1 << 15


#define SDL_AUDIO_BITSIZE(x) (x & SDL_AUDIO_MASK_BITSIZE)
def SDL_AUDIO_BITSIZE(x):
    return x & SDL_AUDIO_MASK_BITSIZE


#define SDL_AUDIO_ISFLOAT(x) (x & SDL_AUDIO_MASK_DATATYPE)
def SDL_AUDIO_ISFLOAT(x):
    return x & SDL_AUDIO_MASK_DATATYPE


#define SDL_AUDIO_ISBIGENDIAN(x) (x & SDL_AUDIO_MASK_ENDIAN)
def SDL_AUDIO_ISBIGENDIAN(x):
    return x & SDL_AUDIO_MASK_ENDIAN


#define SDL_AUDIO_ISSIGNED(x) (x & SDL_AUDIO_MASK_SIGNED)
def SDL_AUDIO_ISSIGNED(x):
    return x & SDL_AUDIO_MASK_SIGNED


#define SDL_AUDIO_ISINT(x) (!SDL_AUDIO_ISFLOAT(x))
def SDL_AUDIO_ISINT(x):
    return not SDL_AUDIO_ISFLOAT(x)


#define SDL_AUDIO_ISLITTLEENDIAN(x) (!SDL_AUDIO_ISBIGENDIAN(x))
def SDL_AUDIO_ISLITTLEENDIAN(x):
    return not SDL_AUDIO_ISBIGENDIAN(x)


#define SDL_AUDIO_ISUNSIGNED(x) (!SDL_AUDIO_ISSIGNED(x))
def SDL_AUDIO_ISUNSIGNED(x):
    return not SDL_AUDIO_ISSIGNED(x)

# Audio format flags

# Defaults to LSB byte order.
AUDIO_U8 = 0x0008       # Unsigned 8-bit samples
AUDIO_S8 = 0x8008       # Signed 8-bit samples
AUDIO_U16LSB = 0x0010   # Unsigned 16-bit samples
AUDIO_S16LSB = 0x8010   # Signed 16-bit samples
AUDIO_U16MSB = 0x1010   # As above, but big-endian byte order
AUDIO_S16MSB = 0x9010   # As above, but big-endian byte order
AUDIO_U16 = AUDIO_U16LSB
AUDIO_S16 = AUDIO_S16LSB

# int32 support
AUDIO_S32LSB = 0x8020   # 32-bit integer samples
AUDIO_S32MSB = 0x9020   # As above, but big-endian byte order
AUDIO_S32 = AUDIO_S32LSB

# float32 support
AUDIO_F32LSB = 0x8120   # 32-bit floating point samples
AUDIO_F32MSB = 0x9120   # As above, but big-endian byte order
AUDIO_F32 = AUDIO_F32LSB

# Native audio byte ordering
if SDL_BYTEORDER == SDL_LIL_ENDIAN:
    AUDIO_U16SYS = AUDIO_U16LSB
    AUDIO_S16SYS = AUDIO_S16LSB
    AUDIO_S32SYS = AUDIO_S32LSB
    AUDIO_F32SYS = AUDIO_F32LSB
else:
    AUDIO_U16SYS = AUDIO_U16MSB
    AUDIO_S16SYS = AUDIO_S16MSB
    AUDIO_S32SYS = AUDIO_S32MSB
    AUDIO_F32SYS = AUDIO_F32MSB

# Allow change flags
# Which audio format changes are allowed when opening a device.
SDL_AUDIO_ALLOW_FREQUENCY_CHANGE = 0x00000001
SDL_AUDIO_ALLOW_FORMAT_CHANGE = 0x00000002
SDL_AUDIO_ALLOW_CHANNELS_CHANGE = 0x00000004
SDL_AUDIO_ALLOW_ANY_CHANGE = (
    SDL_AUDIO_ALLOW_FREQUENCY_CHANGE | SDL_AUDIO_ALLOW_FORMAT_CHANGE | SDL_AUDIO_ALLOW_CHANNELS_CHANGE)


# SDL_image.h


IMG_INIT_JPG = 0x00000001
IMG_INIT_PNG = 0x00000002
IMG_INIT_TIF = 0x00000004
IMG_INIT_WEBP = 0x00000008
IMG_INIT_EVERYTHING = IMG_INIT_JPG | IMG_INIT_PNG | IMG_INIT_TIF | IMG_INIT_WEBP


# SDL_joystick.h


SDL_HAT_CENTERED = 0x00
SDL_HAT_UP = 0x01
SDL_HAT_RIGHT = 0x02
SDL_HAT_DOWN = 0x04
SDL_HAT_LEFT = 0x08
SDL_HAT_RIGHTUP = SDL_HAT_RIGHT | SDL_HAT_UP
SDL_HAT_RIGHTDOWN = SDL_HAT_RIGHT | SDL_HAT_DOWN
SDL_HAT_LEFTUP = SDL_HAT_LEFT | SDL_HAT_UP
SDL_HAT_LEFTDOWN = SDL_HAT_LEFT | SDL_HAT_DOWN



# SDL_ttf.h


TTF_STYLE_NORMAL = 0x00
TTF_STYLE_BOLD = 0x01
TTF_STYLE_ITALIC = 0x02
TTF_STYLE_UNDERLINE = 0x04
TTF_STYLE_STRIKETHROUGH = 0x08

TTF_HINTING_NORMAL = 0
TTF_HINTING_LIGHT = 1
TTF_HINTING_MONO = 2
TTF_HINTING_NONE = 3


# SDL_mixer.h


MIX_INIT_FLAC = 0x00000001
MIX_INIT_MOD = 0x00000002
MIX_INIT_MODPLUG = 0x00000004
MIX_INIT_MP3 = 0x00000008
MIX_INIT_OGG = 0x00000010
MIX_INIT_FLUIDSYNTH = 0x00000020
MIX_INIT_EVERYTHING = (
    MIX_INIT_FLAC | MIX_INIT_MOD | MIX_INIT_MODPLUG | MIX_INIT_MP3 | MIX_INIT_OGG | MIX_INIT_FLUIDSYNTH)

MIX_CHANNELS = 8
MIX_DEFAULT_FREQUENCY = 22050
if SDL_BYTEORDER == SDL_LIL_ENDIAN:
    MIX_DEFAULT_FORMAT = AUDIO_S16LSB
else:
    MIX_DEFAULT_FORMAT = AUDIO_S16MSB
MIX_DEFAULT_CHANNELS = 2
MIX_MAX_VOLUME = 128        # Volume of a chunk
MIX_CHANNEL_POST = -2
MIX_EFFECTSMAXSPEED = "MIX_EFFECTSMAXSPEED"


#define Mix_LoadWAV(file)   Mix_LoadWAV_RW(SDL_RWFromFile(file, "rb"), 1)
def Mix_LoadWAV(file):
    return mixer_lib.Mix_LoadWAV_RW(mixer_lib.SDL_RWFromFile(file, "rb"), 1)


#define Mix_PlayChannel(channel,chunk,loops) Mix_PlayChannelTimed(channel,chunk,loops,-1)
def Mix_PlayChannel(channel, chunk, loops):
    return mixer_lib.Mix_PlayChannelTimed(channel, chunk, loops, -1)


#define Mix_FadeInChannel(channel,chunk,loops,ms) Mix_FadeInChannelTimed(channel,chunk,loops,ms,-1)
def Mix_FadeInChannel(channel, chunk, loops, ms):
    return mixer_lib.Mix_FadeInChannelTimed(channel, chunk, loops, ms, -1)
